// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// enums
enum Role {
    student
    teacher
    owner
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    firstName     String?
    secondName    String?
    accounts      Account[]
    sessions      Session[]
    member        Member[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Team {
    id          String   @id @default(cuid())
    code        String   @unique
    title       String   @default("My team")
    description String?  @default("My team description")
    image       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    member      Member[]
}

model Member {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    role      Role     @default(student)
    userId    String
    teamId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Newsletter {
    id        String   @id @default(cuid())
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Contact {
    id      String @id @default(cuid())
    name    String
    email   String
    message String
}
